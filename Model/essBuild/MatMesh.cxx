#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <fstream>

#include "NameStack.h"
#include "RegMethod.h"

#include "Vec3D.h"
#include "Code.h"
#include "varList.h"
#include "MatrixBase.h"
#include "Matrix.h"
#include "FuncDataBase.h"
#include "Simulation.h"

#include "Triple.h"
#include "BaseVisit.h"
#include "BaseModVisit.h"
#include "HeadRule.h"
#include "Surface.h"
#include "Object.h"
#include <sstream>
#include "FileReport.h"
#include "OutputLog.h"
#include "Exception.h"
#include "MatMesh.h"

namespace essSystem
{
  MatMesh::MatMesh(Simulation &System) :
    SimPtr(&System)
  {
    /*!
      \param SimPtr :: simulation
     */
    ELog::RegMethod RegA("MatMesh", "Constructor");

    System.populateCells();
    System.validateObjSurfMap();

    return;
  }

  MatMesh::~MatMesh()
  {
    ELog::RegMethod RegA("MatMesh", "Destructor");
    return;
  }

  std::string
  MatMesh::getMaterials(std::vector<int> vmat) const
  {
    /*!
      Convert array of integer material IDs into string
      \param vmat :: array of materials
     */
    ELog::RegMethod RControl("MatMesh","getMaterials(std::vector<int>)");
    std::ostringstream buffer;

    std::sort(vmat.begin(), vmat.end());
    const size_t N = vmat.size(); // total number of material entries
    std::vector<int> vmatu = vmat;
    std::vector<int>::iterator it = std::unique(vmatu.begin(), vmatu.end());
    vmatu.resize(static_cast<size_t>((std::distance(vmatu.begin(), it))));
    std::vector<int> vfrac(vmatu.size(), 0); // fractions

    for (size_t j=0; j<vmatu.size(); j++) {
      for (size_t i=0; i<N; i++)
	if (vmatu[j] == vmat[i])
	  vfrac[j]++;
      buffer << vfrac[j]*100.0/static_cast<double>(N) << "%" << vmatu[j] << "\t";
    }
    return buffer.str();
  }


  std::vector<int>
  MatMesh::getMaterials(const Geometry::Vec3D &center, double *stepXYZ, size_t N) const
  {
    /*!
      Calculate material fractions in the given cell
      \param center :: coordinates of the cell centre
      \param stepXYZ :: cell size
      \param N :: number of randm points to sample
     */
    ELog::RegMethod RControl("MatMesh","getMaterials");

    std::vector<int> vmat;
    double x, y, z, r;
    MonteCarlo::Object *ObjPtr(0);

    for (size_t i=0; i<N; i++) {
      r = (rand() % 100)/100.0 - 0.5; // -0.5 ... 0.5
      x = center[0] + r*stepXYZ[0];

      r = (rand() % 100)/100.0 - 0.5;
      y = center[1] + r*stepXYZ[1];

      r = (rand() % 100)/100.0 - 0.5;
      z = center[2] + r*stepXYZ[2];
      Geometry::Vec3D p(x, y, z);

      ObjPtr = SimPtr->findCell(p, ObjPtr);
      if (ObjPtr)
	vmat.push_back(ObjPtr->getMat());
      else
	ELog::EM << "Can't find cell at " << p << ELog::endCrit;
    }

    return vmat;
  }

  void MatMesh::Dump(const std::vector<double>& vx,
		     const std::vector<double>& vy,
		     const std::vector<double>& vz,
		     const char *fname) const
  {
    /*!
      Dump material mesh defined by XYZ boundaries into ASCII file
      \param vx :: array of boundaries along the x-axis
      \param vy :: array of boundaries along the y-axis
      \param vz :: array of boundaries along the z-axis
     */
    ELog::RegMethod RControl("MatMesh","Dump(vx, vy, vz, fname)");
    ELog::EM << "Dumping material mesh into\t" << fname << ELog::endBasic;

    const size_t nX = vx.size()-1;
    const size_t nY = vy.size()-1;
    const size_t nZ = vz.size()-1;

    MonteCarlo::Object *ObjPtr(0);

    std::ofstream fmesh;
    fmesh.open(fname);
    int mat = 0;
    std::vector<int> vmat;
    double xmin, ymin, zmin, xmax, ymax, zmax;
    double  stepXYZ[3];

    for (size_t k=0; k<nZ; k++) {
      std::cout << k << "/" << nZ << std::endl;
      for (size_t j=0; j<nY; j++) {
	for (size_t i=0; i<nX; i++) {

	  const Geometry::Vec3D Pt((vx[i+1]+vx[i])/2.0, (vy[j+1]+vy[j])/2.0, (vz[k+1]+vz[k])/2.0);
	  ObjPtr = SimPtr->findCell(Pt, ObjPtr);
	  if (ObjPtr)
	    mat = ObjPtr->getMat();
	  else
	    mat = -1;
	  xmin = vx[i];	  xmax = vx[i+1];
	  ymin = vy[j];	  ymax = vy[j+1];
	  zmin = vz[k];	  zmax = vz[k+1];
	  stepXYZ[0] = xmax-xmin;
	  stepXYZ[1] = ymax-ymin;
	  stepXYZ[2] = zmax-zmin;
	  vmat = getMaterials(Pt, stepXYZ, 1000);
	  fmesh << xmin << " " << xmax << " " << ymin << " " << ymax << " " << zmin << " " << zmax << "\t";
	  fmesh << "\t" << getMaterials(vmat) << std::endl;;
	}
      }
    }
    fmesh.close();
  }

  void MatMesh::Dump(const Geometry::Vec3D &startPt, const Geometry::Vec3D &endPt,
		     const size_t nX, const size_t nY, const size_t nZ,
		     const char *fname) const
  {
    /*!
      Dumps a mesh with materials in ASCII file 'fname'
      \param startPt :: Point with min coordinates
      \param endPt :: Point with max coordinates
      \param nX :: x-coordinate division
      \param nY :: y-coordinate division
      \param nZ :: z-coordinate division
      \param fname :: output file name
    */

    ELog::RegMethod RControl("MatMesh","Dump(start, end, nx, ny, nz, fname)");

    Geometry::Vec3D Origin = startPt; // start corner (x,y,z=min)
    Geometry::Vec3D XYZ = endPt-Origin;
    
    Triple<long int> nPts = Triple<long int>(static_cast<long int>(nX), static_cast<long int>(nY), static_cast<long int>(nZ));
    double  stepXYZ[3];
    for (size_t i=0; i<3; i++)
      stepXYZ[i] = XYZ[i]/static_cast<double>(nPts[i]);

    std::vector<double> vx, vy, vz;

    for (size_t k=0; k<=nZ; k++)
      vz.push_back(startPt[2] + stepXYZ[2]*k);
    for (size_t j=0; j<=nY; j++)
      vy.push_back(startPt[1] + stepXYZ[1]*j);
    for (size_t i=0; i<=nX; i++)
      vx.push_back(startPt[0] + stepXYZ[0]*i);

    Dump(vx, vy, vz, fname);
    
    return;
  }

  void MatMesh::Dump(const int &matmesh, const char *fname) const
  {
    /*!
      Dumps a mesh with materials in ASCII file 'fname'.
      The mesh is defined by the pre-defined index 'matmesh'.
    */
    ELog::RegMethod RControl("MatMesh","Dump(n, fname)");

    if (fname==0)
      fname = ("matmesh" + std::to_string(matmesh) + ".dat").c_str();

    if (matmesh==1)
      {
        Geometry::Vec3D ptStart(-70, -70, -80);
        Geometry::Vec3D ptEnd(70, 70, -20);
        Dump(ptStart, ptEnd, 10, 10, 10, fname);
      }
    else if (matmesh==6) // used for flux mesh in the old geometry 0e9675a (1 Jul 2016, /home/kbat/figs/butterfly/Flux-mesh); generated by ~/figs/butterfly/mesh/flux/bins.C
      {
	std::vector<double> vx {-67, -56.2333, -45.4667, -34.7, -30.8633, -27.0267, -23.19, -19.3533, -15.5167, -11.68, -10.8545, -10.0291, -9.20364, -8.37818, -7.55273, -6.72727, -5.90182, -5.07636, -4.25091, -3.42545, -2.6, -2.3, -1.8, -1.5, -1.1, -0.8, 0.8, 1.1, 1.5, 1.8, 2.3, 2.6, 3.42545, 4.25091, 5.07636, 5.90182, 6.72727, 7.55273, 8.37818, 9.20364, 10.0291, 10.8545, 11.68, 15.5167, 19.3533, 23.19, 27.0267, 30.8633, 34.7, 45.4667, 56.2333, 67};
	std::vector<double> vy {-67, -56.2333, -45.4667, -34.7, -29.85, -25, -20.15, -15.3, -15, -14.5, -14.2, -12.8476, -11.4952, -10.1429, -8.79048, -7.4381, -6.08571, -4.73333, -3.38095, -2.02857, -0.67619, 0.67619, 2.02857, 3.38095, 4.73333, 6.08571, 7.4381, 8.79048, 10.1429, 11.4952, 12.8476, 14.2, 14.5, 15, 15.3, 20.15, 25, 29.85, 34.7, 45.4667, 56.2333, 67};
	std::vector<double> vz {-75, -68.22, -61.44, -54.66, -47.88, -41.1, -40.7, -40.1, -39.8, -37.81, -35.82, -33.83, -31.84, -29.85, -27.86, -25.87, -23.88, -21.89, -19.9, -19.6, -18.6, -18.3, -17.8, -17.4, -17, -16.7, -16.2, -15.9, -15.5, -15.2, -13.6, -13.3, -12.9, -12.6, -12.1, -11.8, -11.4, -11, -10.5, -10.3, -10.2, -7.3, -7, 7, 7.3, 10.3, 10.6, 11.1, 11.4, 11.8, 12.1, 13.7, 14, 14.4, 14.7, 15.2, 15.5, 15.8, 16.5, 16.8, 17.1, 19.1, 21.1, 23.1, 25.1, 27.1, 29.1, 31.1, 33.1, 35.1, 37.1, 37.4, 38, 38.4, 45.72, 53.04, 60.36, 67.68, 75};

	Dump(vx, vy, vz, fname);
      }
    else if (matmesh==7) // used for heat load mesh with the new geometry (Nov 2016); generated by ~/figs/butterfly/mesh/heat/v3/bins.C
      {
	std::vector<double> vx {-67, -56.2333, -45.4667, -34.7, -30.8733, -27.0467, -23.22, -19.3933, -15.5667, -11.74, -10.5667, -9.39333, -8.22, -7.88, -5.4, -5.1, -4.9, -4.7, -2.5, -2.3, -2.1, -1.8, -0.8, -0.6, -0.4, -0.1, 0.1, 0.4, 0.6, 0.8, 1.8, 2.1, 2.3, 2.5, 4.7, 4.9, 5.1, 5.4, 7.88, 8.22, 9.39333, 10.5667, 11.74, 15.5667, 19.3933, 23.22, 27.0467, 30.8733, 34.7, 45.4667, 56.2333, 67};
	std::vector<double> vy {-67, -56.2333, -45.4667, -34.7, -29.85, -25, -20.15, -15.3, -15, -14.5, -14.2, -13.4, -12.6, -11.8, -11.6, -10.3111, -9.02222, -7.73333, -6.44444, -5.15556, -3.86667, -2.57778, -1.28889, -8.88178e-16, 1.28889, 2.57778, 3.86667, 5.15556, 6.44444, 7.73333, 9.02222, 10.3111, 11.6, 11.8, 12.6, 13.4, 14.2, 14.5, 15, 15.3, 20.15, 25, 29.85, 34.7, 45.4667, 56.2333, 67};
	std::vector<double> vz {-75, -68.22, -61.44, -54.66, -47.88, -41.1, -40.7, -40.1, -39.8, -37.8, -35.8, -33.8, -31.8, -29.8, -27.8, -25.8, -23.8, -21.8, -19.8, -19.2, -18.7, -18.3, -12.3, -11.9, -11.4, -11.1, -8.1, -7.8, -5.8, 5.8, 7.8, 8.1, 11.1, 11.4, 11.9, 12.2, 15.2, 15.5, 16, 16.3, 16.6, 16.9, 18.92, 20.94, 22.96, 24.98, 27, 29.02, 31.04, 33.06, 35.08, 37.1, 37.4, 38, 38.4, 45.72, 53.04, 60.36, 67.68, 75};

	Dump(vx, vy, vz, fname);
      }
    else if (matmesh==8) // /home/kbat/figs/butterfly/mesh/heat/v3/fromLuca/HeatLoadBottomSteel
      {
	std::vector<double> vx {-67, -56.2333, -45.4667, -34.7, -30.8733, -27.0467, -23.22, -19.3933, -15.5667, -11.74, -10.5667, -9.39333, -8.22, -7.88, -5.4, -5.1, -4.9, -4.7, -2.5, -2.3, -2.1, -1.8, -0.8, -0.6, -0.4, -0.1, 0.1, 0.4, 0.6, 0.8, 1.8, 2.1, 2.3, 2.5, 4.7, 4.9, 5.1, 5.4, 7.88, 8.22, 9.39333, 10.5667, 11.74, 15.5667, 19.3933, 23.22, 27.0467, 30.8733, 34.7, 45.4667, 56.2333, 67};
	std::vector<double> vy {-67, -56.2333, -45.4667, -34.7, -29.85, -25, -20.15, -15.3, -15, -14.5, -14.2, -13.4, -12.6, -11.8, -11.6, -10.3111, -9.02222, -7.73333, -6.44444, -5.15556, -3.86667, -2.57778, -1.28889, -8.88178e-16, 1.28889, 2.57778, 3.86667, 5.15556, 6.44444, 7.73333, 9.02222, 10.3111, 11.6, 11.8, 12.6, 13.4, 14.2, 14.5, 15, 15.3, 20.15, 25, 29.85, 34.7, 45.4667, 56.2333, 67};
	std::vector<double> vz {-75, -72.2, -69.4, -66.6, -63.8, -61, -58.61, -56.22, -53.83, -51.44, -49.05, -46.66, -44.27, -41.88, -39.49, -37.1, -35.245, -33.39, -31.535, -29.68, -27.825, -25.97, -24.115, -22.26, -20.405, -18.55, -17.475, -16.4, -15.325, -14.25, -13.175, -12.1, -11.025, -9.95, -8.875, -7.8, -7.8, -5.8, 5.8, 7.8, 8.1, 11.1, 11.4, 11.9, 12.2, 15.2, 15.5, 16, 16.3, 16.6, 16.9, 18.92, 20.94, 22.96, 24.98, 27, 29.02, 31.04, 33.06, 35.08, 37.1, 37.4, 38, 38.4, 45.72, 53.04, 60.36, 67.68, 75};

	Dump(vx, vy, vz, fname);
      }
    else if (matmesh==9) // /home/kbat/figs/butterfly/Edep-mesh/v4
      {
	std::vector<double> vx {-70, -69.2081, -68.4162, -67.6242, -66.8323, -66.0404, -65.2485, -64.4565, -63.6646, -62.8727, -62.0808, -61.2888, -60.4969, -59.705, -58.9131, -58.1212, -57.3292, -56.5373, -55.7454, -54.9535, -54.1615, -53.3696, -52.5777, -51.7858, -50.9938, -50.2019, -49.41, -48.6181, -47.8262, -47.0342, -46.2423, -45.4504, -44.6585, -43.8665, -43.0746, -42.2827, -41.4908, -40.6988, -39.9069, -39.115, -38.3231, -37.5312, -36.7392, -35.9473, -35.1554, -34.3635, -33.5715, -32.7796, -31.9877, -31.1958, -30.4038, -29.6119, -28.82, -28.0281, -27.2362, -26.4442, -25.6523, -24.8604, -24.0685, -23.2765, -22.4846, -21.6927, -20.9008, -20.1088, -19.3169, -18.525, -17.7331, -16.9412, -16.1492, -15.3573, -14.5654, -13.7735, -12.9815, -12.1896, -11.3977, -10.6058, -9.81385, -9.02192, -8.23, -8.055, -7.88, -7.73412, -7.58824, -7.44235, -7.29647, -7.15059, -7.00471, -6.85882, -6.71294, -6.56706, -6.42118, -6.27529, -6.12941, -5.98353, -5.83765, -5.69176, -5.54588, -5.4, -5.1, -4.89, -4.69, -4.5025, -4.315, -4.1275, -3.94, -3.7525, -3.565, -3.3775, -3.19, -2.99, -2.75, -2.51, -2.3, -2.1, -1.8, -1.602, -1.404, -1.206, -1.008, -0.81, -0.61, -0.41, -0.1, 0.1, 0.41, 0.61, 0.81, 1.008, 1.206, 1.404, 1.602, 1.8, 2.1, 2.3, 2.51, 2.75, 2.99, 3.19, 3.3775, 3.565, 3.7525, 3.94, 4.1275, 4.315, 4.5025, 4.69, 4.89, 5.1, 5.4, 5.54588, 5.69176, 5.83765, 5.98353, 6.12941, 6.27529, 6.42118, 6.56706, 6.71294, 6.85882, 7.00471, 7.15059, 7.29647, 7.44235, 7.58824, 7.73412, 7.88, 8.055, 8.23, 9.02192, 9.81385, 10.6058, 11.3977, 12.1896, 12.9815, 13.7735, 14.5654, 15.3573, 16.1492, 16.9412, 17.7331, 18.525, 19.3169, 20.1088, 20.9008, 21.6927, 22.4846, 23.2765, 24.0685, 24.8604, 25.6523, 26.4442, 27.2362, 28.0281, 28.82, 29.6119, 30.4038, 31.1958, 31.9877, 32.7796, 33.5715, 34.3635, 35.1554, 35.9473, 36.7392, 37.5312, 38.3231, 39.115, 39.9069, 40.6988, 41.4908, 42.2827, 43.0746, 43.8665, 44.6585, 45.4504, 46.2423, 47.0342, 47.8262, 48.6181, 49.41, 50.2019, 50.9938, 51.7858, 52.5777, 53.3696, 54.1615, 54.9535, 55.7454, 56.5373, 57.3292, 58.1212, 58.9131, 59.705, 60.4969, 61.2888, 62.0808, 62.8727, 63.6646, 64.4565, 65.2485, 66.0404, 66.8323, 67.6242, 68.4162, 69.2081, 70};
	std::vector<double> vy {-70, -69.2183, -68.4366, -67.6549, -66.8731, -66.0914, -65.3097, -64.528, -63.7463, -62.9646, -62.1829, -61.4011, -60.6194, -59.8377, -59.056, -58.2743, -57.4926, -56.7109, -55.9291, -55.1474, -54.3657, -53.584, -52.8023, -52.0206, -51.2389, -50.4571, -49.6754, -48.8937, -48.112, -47.3303, -46.5486, -45.7669, -44.9851, -44.2034, -43.4217, -42.64, -41.8583, -41.0766, -40.2949, -39.5131, -38.7314, -37.9497, -37.168, -36.3863, -35.6046, -34.8229, -34.0411, -33.2594, -32.4777, -31.696, -30.9143, -30.1326, -29.3509, -28.5691, -27.7874, -27.0057, -26.224, -25.4423, -24.6606, -23.8789, -23.0971, -22.3154, -21.5337, -20.752, -19.9703, -19.1886, -18.4069, -17.6251, -16.8434, -16.0617, -15.28, -15, -14.75, -14.5, -14.2, -14, -13.8, -13.6, -13.4, -13.2, -13, -12.8, -12.6, -12.4, -12.2, -12, -11.8, -11.6, -11.4, -11.2, -11, -10.8, -10.6, -10.4, -10.2, -10, -9.8, -9.6, -9.4, -9.2, -9, -8.8, -8.6, -8.4, -8.2, -8, -7.8, -7.6, -7.4, -7.2, -7, -6.8, -6.6, -6.4, -6.2, -6, -5.8, -5.6, -5.4, -5.2, -5, -4.8, -4.6, -4.4, -4.2, -4, -3.8, -3.6, -3.4, -3.2, -3, -2.8, -2.6, -2.4, -2.2, -2, -1.8, -1.6, -1.4, -1.2, -1, -0.8, -0.6, -0.4, -0.2, -1.63758e-14, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, 2.2, 2.4, 2.6, 2.8, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.2, 4.4, 4.6, 4.8, 5, 5.2, 5.4, 5.6, 5.8, 6, 6.2, 6.4, 6.6, 6.8, 7, 7.2, 7.4, 7.6, 7.8, 8, 8.2, 8.4, 8.6, 8.8, 9, 9.2, 9.4, 9.6, 9.8, 10, 10.2, 10.4, 10.6, 10.8, 11, 11.2, 11.4, 11.6, 11.8, 12, 12.2, 12.4, 12.6, 12.8, 13, 13.2, 13.4, 13.6, 13.8, 14, 14.2, 14.5, 14.75, 15, 15.28, 16.0617, 16.8434, 17.6251, 18.4069, 19.1886, 19.9703, 20.752, 21.5337, 22.3154, 23.0971, 23.8789, 24.6606, 25.4423, 26.224, 27.0057, 27.7874, 28.5691, 29.3509, 30.1326, 30.9143, 31.696, 32.4777, 33.2594, 34.0411, 34.8229, 35.6046, 36.3863, 37.168, 37.9497, 38.7314, 39.5131, 40.2949, 41.0766, 41.8583, 42.64, 43.4217, 44.2034, 44.9851, 45.7669, 46.5486, 47.3303, 48.112, 48.8937, 49.6754, 50.4571, 51.2389, 52.0206, 52.8023, 53.584, 54.3657, 55.1474, 55.9291, 56.7109, 57.4926, 58.2743, 59.056, 59.8377, 60.6194, 61.4011, 62.1829, 62.9646, 63.7463, 64.528, 65.3097, 66.0914, 66.8731, 67.6549, 68.4366, 69.2183, 70};
	std::vector<double> vz {-75, -72.2, -69.4, -66.6, -63.8, -61, -57.5333, -54.0667, -50.6, -50.3, -48.1, -45.9, -43.7, -41.5, -39.3, -37.1, -34.55, -32.8, -31.4667, -30.1333, -28.8, -27.4667, -26.1333, -24.8, -23.4667, -22.1333, -20.8, -20.3, -19.8, -19.3, -18.8, -18.3, -17.8, -17.4154, -17.0308, -16.6462, -16.2615, -15.8769, -15.4923, -15.1077, -14.7231, -14.3385, -13.9538, -13.5692, -13.1846, -12.8, -12.6, -12.4, -12.2, -12, -11.8, -11.6, -11.4, -11.2, -11, -10.8, -10.6, -10.4, -10.2, -10, -9.8, -9.6, -9.4, -9.2, -9, -8.8, -8.6, -8.4, -8.2, -8, -7.8, -5.8, 5.8, 7.8, 8.1, 8.3, 8.5, 8.7, 8.9, 9.1, 9.3, 9.5, 9.7, 9.9, 10.1, 10.3, 10.5, 10.7, 10.9, 11.1, 11.4, 11.9, 12.2, 12.4, 12.6, 12.8, 13, 13.2, 13.4, 13.6, 13.8, 14, 14.2, 14.4, 14.6, 14.8, 15, 15.2, 15.5, 16, 16.3, 16.6, 16.8, 17, 17.2, 17.4, 17.6, 17.8032, 18.0064, 18.2096, 18.4128, 18.616, 18.8192, 19.0224, 19.2256, 19.4288, 19.632, 19.8352, 20.0384, 20.2416, 20.4448, 20.648, 20.8512, 21.0544, 21.2576, 21.4608, 21.664, 21.8672, 22.0704, 22.2736, 22.4768, 22.68, 22.8914, 23.1029, 23.3143, 23.5257, 23.7371, 23.9486, 24.16, 24.3632, 24.5664, 24.7696, 24.9728, 25.176, 25.3792, 25.5824, 25.7856, 25.9888, 26.192, 26.3952, 26.5984, 26.8016, 27.0048, 27.208, 27.4112, 27.6144, 27.8176, 28.0208, 28.224, 28.4272, 28.6304, 28.8336, 29.0368, 29.24, 29.4514, 29.6629, 29.8743, 30.0857, 30.2971, 30.5086, 30.72, 30.9232, 31.1264, 31.3296, 31.5328, 31.736, 31.9392, 32.1424, 32.3456, 32.5488, 32.752, 32.9552, 33.1584, 33.3616, 33.5648, 33.768, 33.9712, 34.1744, 34.3776, 34.5808, 34.784, 34.9872, 35.1904, 35.3936, 35.5968, 35.8, 35.9667, 36.1333, 36.3, 36.4667, 36.6333, 36.8, 36.9667, 37.1333, 37.3, 37.6, 41.7556, 45.9111, 50.0667, 54.2222, 58.3778, 62.5333, 66.6889, 70.8444, 75};
	
	Dump(vx, vy, vz, fname);
      }
    else if (matmesh==10) // /home/kbat/figs/butterfly/Edep-mesh/10/bf1 - same study as for matmesh9, but the mesh generated for BF2
      {
	std::vector<double> vx {-73, -72.4, -71.8, -71.2, -70.6, -70, -69.4, -68.8, -68.2, -67.6, -67, -66.4, -65.8, -65.2, -64.6, -64, -63.4, -62.8, -62.2, -61.6, -61, -60.4, -59.8, -59.2, -58.6, -58, -57.4, -56.8, -56.2, -55.6, -55, -54.4, -53.8, -53.2, -52.6, -52, -51.4, -50.8, -50.2, -49.6, -49, -48.4, -47.8, -47.2, -46.6, -46, -45.4, -44.8, -44.2, -43.6, -43, -42.4, -41.8, -41.2, -40.6, -40, -39.4, -38.8, -38.2, -37.6, -37, -36.4, -35.8, -35.2, -34.6, -34, -33.4, -32.8, -32.2, -31.6, -31, -30.4, -29.8, -29.2, -28.6, -28, -27.4, -26.8, -26.2, -25.6, -25, -24.4, -23.8, -23.2, -22.6, -22, -21.4, -20.8, -20.2, -19.6, -19, -18.4, -17.8, -17.2, -16.6, -16, -15.4, -14.8, -14.2, -13.6, -13, -12.8, -12.6, -12.4, -12.2, -12, -11.8, -11.6, -11.4, -11.2, -11, -10.8, -10.6, -10.4, -10.2, -10, -9.8, -9.6, -9.4, -9.2, -9, -8.8, -8.6, -8.4, -8.2, -8, -7.8, -7.6, -7.4, -7.2, -7, -6.8, -6.6, -6.4, -6.2, -6, -5.8, -5.6, -5.4, -5.2, -5, -4.8, -4.6, -4.4, -4.2, -4, -3.8, -3.6, -3.4, -3.2, -3, -2.8, -2.6, -2.4, -2.2, -2, -1.8, -1.6, -1.4, -1.2, -1, -0.8, -0.6, -0.4, -0.2, 6.38378e-15, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, 2.2, 2.4, 2.6, 2.8, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.2, 4.4, 4.6, 4.8, 5, 5.2, 5.4, 5.6, 5.8, 6, 6.2, 6.4, 6.6, 6.8, 7, 7.2, 7.4, 7.6, 7.8, 8, 8.2, 8.4, 8.6, 8.8, 9, 9.2, 9.4, 9.6, 9.8, 10, 10.2, 10.4, 10.6, 10.8, 11, 11.2, 11.4, 11.6, 11.8, 12, 12.2, 12.4, 12.6, 12.8, 13, 13.6, 14.2, 14.8, 15.4, 16, 16.6, 17.2, 17.8, 18.4, 19, 19.6, 20.2, 20.8, 21.4, 22, 22.6, 23.2, 23.8, 24.4, 25, 25.6, 26.2, 26.8, 27.4, 28, 28.6, 29.2, 29.8, 30.4, 31, 31.6, 32.2, 32.8, 33.4, 34, 34.6, 35.2, 35.8, 36.4, 37, 37.6, 38.2, 38.8, 39.4, 40, 40.6, 41.2, 41.8, 42.4, 43, 43.6, 44.2, 44.8, 45.4, 46, 46.6, 47.2, 47.8, 48.4, 49, 49.6, 50.2, 50.8, 51.4, 52, 52.6, 53.2, 53.8, 54.4, 55, 55.6, 56.2, 56.8, 57.4, 58, 58.6, 59.2, 59.8, 60.4, 61, 61.6, 62.2, 62.8, 63.4, 64, 64.6, 65.2, 65.8, 66.4, 67, 67.6, 68.2, 68.8, 69.4, 70, 70.6, 71.2, 71.8, 72.4, 73};
	std::vector<double> vy {-73, -72.4, -71.8, -71.2, -70.6, -70, -69.4, -68.8, -68.2, -67.6, -67, -66.4, -65.8, -65.2, -64.6, -64, -63.4, -62.8, -62.2, -61.6, -61, -60.4, -59.8, -59.2, -58.6, -58, -57.4, -56.8, -56.2, -55.6, -55, -54.4, -53.8, -53.2, -52.6, -52, -51.4, -50.8, -50.2, -49.6, -49, -48.4, -47.8, -47.2, -46.6, -46, -45.4, -44.8, -44.2, -43.6, -43, -42.4, -41.8, -41.2, -40.6, -40, -39.4, -38.8, -38.2, -37.6, -37, -36.4, -35.8, -35.2, -34.6, -34, -33.4, -32.8, -32.2, -31.6, -31, -30.4, -29.8, -29.2, -28.6, -28, -27.4, -26.8, -26.2, -25.6, -25, -24.4, -23.8, -23.2, -22.6, -22, -21.4, -20.8, -20.2, -19.6, -19, -18.4, -17.8, -17.2, -16.6, -16, -15.4, -14.8, -14.2, -13.6, -13, -12.8, -12.6, -12.4, -12.2, -12, -11.8, -11.6, -11.4, -11.2, -11, -10.8, -10.6, -10.4, -10.2, -10, -9.8, -9.6, -9.4, -9.2, -9, -8.8, -8.6, -8.4, -8.2, -8, -7.8, -7.6, -7.4, -7.2, -7, -6.8, -6.6, -6.4, -6.2, -6, -5.8, -5.6, -5.4, -5.2, -5, -4.8, -4.6, -4.4, -4.2, -4, -3.8, -3.6, -3.4, -3.2, -3, -2.8, -2.6, -2.4, -2.2, -2, -1.8, -1.6, -1.4, -1.2, -1, -0.8, -0.6, -0.4, -0.2, 6.38378e-15, 0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6, 1.8, 2, 2.2, 2.4, 2.6, 2.8, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.2, 4.4, 4.6, 4.8, 5, 5.2, 5.4, 5.6, 5.8, 6, 6.2, 6.4, 6.6, 6.8, 7, 7.2, 7.4, 7.6, 7.8, 8, 8.2, 8.4, 8.6, 8.8, 9, 9.2, 9.4, 9.6, 9.8, 10, 10.2, 10.4, 10.6, 10.8, 11, 11.2, 11.4, 11.6, 11.8, 12, 12.2, 12.4, 12.6, 12.8, 13, 13.6, 14.2, 14.8, 15.4, 16, 16.6, 17.2, 17.8, 18.4, 19, 19.6, 20.2, 20.8, 21.4, 22, 22.6, 23.2, 23.8, 24.4, 25, 25.6, 26.2, 26.8, 27.4, 28, 28.6, 29.2, 29.8, 30.4, 31, 31.6, 32.2, 32.8, 33.4, 34, 34.6, 35.2, 35.8, 36.4, 37, 37.6, 38.2, 38.8, 39.4, 40, 40.6, 41.2, 41.8, 42.4, 43, 43.6, 44.2, 44.8, 45.4, 46, 46.6, 47.2, 47.8, 48.4, 49, 49.6, 50.2, 50.8, 51.4, 52, 52.6, 53.2, 53.8, 54.4, 55, 55.6, 56.2, 56.8, 57.4, 58, 58.6, 59.2, 59.8, 60.4, 61, 61.6, 62.2, 62.8, 63.4, 64, 64.6, 65.2, 65.8, 66.4, 67, 67.6, 68.2, 68.8, 69.4, 70, 70.6, 71.2, 71.8, 72.4, 73};
	std::vector<double> vz {5.8, 7.8, 8.1, 8.3, 8.5, 8.7, 8.9, 9.1, 9.3, 9.5, 9.7, 9.9, 10.1, 10.3, 10.5, 10.7, 10.9, 11.1, 11.4, 11.9, 12.2, 12.4, 12.6, 12.8, 13, 13.2, 13.4, 13.6, 13.8, 14, 14.2, 14.4, 14.6, 14.8, 15, 15.2, 15.5, 16, 16.3, 16.6, 16.8, 17, 17.2, 17.4, 17.6, 17.8032, 18.0064, 18.2096, 18.4128, 18.616, 18.8192, 19.0224, 19.2256, 19.4288, 19.632, 19.8352, 20.0384, 20.2416, 20.4448, 20.648, 20.8512, 21.0544, 21.2576, 21.4608, 21.664, 21.8672, 22.0704, 22.2736, 22.4768, 22.68, 22.8914, 23.1029, 23.3143, 23.5257, 23.7371, 23.9486, 24.16, 24.3632, 24.5664, 24.7696, 24.9728, 25.176, 25.3792, 25.5824, 25.7856, 25.9888, 26.192, 26.3952, 26.5984, 26.8016, 27.0048, 27.208, 27.4112, 27.6144, 27.8176, 28.0208, 28.224, 28.4272, 28.6304, 28.8336, 29.0368, 29.24, 29.4514, 29.6629, 29.8743, 30.0857, 30.2971, 30.5086, 30.72, 30.9232, 31.1264, 31.3296, 31.5328, 31.736, 31.9392, 32.1424, 32.3456, 32.5488, 32.752, 32.9552, 33.1584, 33.3616, 33.5648, 33.768, 33.9712, 34.1744, 34.3776, 34.5808, 34.784, 34.9872, 35.1904, 35.3936, 35.5968, 35.8, 35.9667, 36.1333, 36.3, 36.4667, 36.6333, 36.8, 36.9667, 37.1333, 37.3, 37.6, 41.7556, 45.9111, 50.0667, 54.2222, 58.3778, 62.5333, 66.6889, 70.8444, 75};

	Dump(vx, vy, vz, fname);
      }
    else {
	throw ColErr::ExitAbort("matmesh==" + std::to_string(matmesh) + " not supported");
	//	throw ColErr::RangeError<int>(n, 0, 0, "not supported");
      }
  }
}
